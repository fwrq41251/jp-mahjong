// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.winry.mahjong.message



@SerialVersionUID(0L)
final case class DiscardReq(
    gameId: Long = 0L,
    userId: Long = 0L,
    toDiscard: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DiscardReq] with com.trueaccord.lenses.Updatable[DiscardReq] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (gameId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, gameId) }
      if (userId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, userId) }
      if (toDiscard != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, toDiscard) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = gameId
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = userId
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = toDiscard
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.winry.mahjong.message.DiscardReq = {
      var __gameId = this.gameId
      var __userId = this.userId
      var __toDiscard = this.toDiscard
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __gameId = _input__.readInt64()
          case 16 =>
            __userId = _input__.readInt64()
          case 24 =>
            __toDiscard = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.winry.mahjong.message.DiscardReq(
          gameId = __gameId,
          userId = __userId,
          toDiscard = __toDiscard
      )
    }
    def withGameId(__v: Long): DiscardReq = copy(gameId = __v)
    def withUserId(__v: Long): DiscardReq = copy(userId = __v)
    def withToDiscard(__v: Int): DiscardReq = copy(toDiscard = __v)
    def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = gameId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = userId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = toDiscard
          if (__t != 0) __t else null
        }
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.winry.mahjong.message.DiscardReq
}

object DiscardReq extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.winry.mahjong.message.DiscardReq] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.winry.mahjong.message.DiscardReq] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.winry.mahjong.message.DiscardReq = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.winry.mahjong.message.DiscardReq(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int]
    )
  }
  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MessageProto.descriptor.getMessageTypes.get(7)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.winry.mahjong.message.DiscardReq(
  )
  implicit class DiscardReqLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.winry.mahjong.message.DiscardReq]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.winry.mahjong.message.DiscardReq](_l) {
    def gameId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.gameId)((c_, f_) => c_.copy(gameId = f_))
    def userId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def toDiscard: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.toDiscard)((c_, f_) => c_.copy(toDiscard = f_))
  }
  final val GAMEID_FIELD_NUMBER = 1
  final val USERID_FIELD_NUMBER = 2
  final val TODISCARD_FIELD_NUMBER = 3
}
